<!DOCTYPE html>
<html>
<head>
  
<title>Flenagan from 8_2 to</title>
</head>
<body>

<script type="text/javascript">
// Постой класс в javascript
// Это фабричная функция которая возвращает новый обьект range(from, to)
function range(from, to){
  // используем функцию inherit() для создание обьекта, наследующего обькт прототип
  var r = inherit(range.method);
      r.from = from;
      r.to = to;
      //вернуть новый обьект
      return r;
}
// ниже следует обьект прототип наследующий методы
range.method = {
  //вщзвращает true если х обьект класса range
  includes: function(x){ return this.from <= x && x <= this.to;}
// вызывает f для каждого целого числа в диапазоне
foreach: function(f){
  for(var x = Math.ceil(this.from); x <= this.to; x++) f(x);
};
//ниже приводится пример использования обьекта range
var r = range(1,3);   //создать новый обьект range
r.includes(2);   // правда, число 2 вхадит в диапазон
r.foreach(console.log); // 1,2,3
console.log(r); // (1..3)
}
//Конструктор = это функция преднозначеная для инициализации вновь созданых обьектов
// реализация range() с помощью функции конструктора
function Range(from, to){
  this.from = from;
  this.to = to;
}
Range.prototype = {
  includes: function(x){ return this.from <= x && x <= this.to;}
  foreach: function(f){
    for(var x = Math.ceil(this.from); x <= this.to; x++) f(x);
  },
toString: function(){ return "(" + this.form + " ..." + this.to + ")";}
};
//ниже приводится пример использования обьекта range
var r = new Range(1,3);   //создать новый обьект range
r.includes(2);   // правда, число 2 вхадит в диапазон
r.foreach(console.log); // 1,2,3
console.log(r); // (1..3)
}
//==============================================
var F = function() {} // это обьект функции
var p = F.prototype; // это обьект прототип связаный с ней
var c = p.constructor; //это функция связаняя с прототипом
c === F; // правда, F.prototype.constructor === F для всей функции
//---------------------------------
var o = new F();
o.constructor === F; //правда, свойство конструктор определяет класс
//==================================================================
//Здесь расширяется предопределеный обьект Range.prototype
// по этому не требуется переопределять значение автоматически
Range.prototype.includes = function(x){ return this.form <= x && x <= this.to;};
Range.prototype.foreach = function(f){
  for(var x = Math.ceil(this.from); x <= this.to; x++) f(x);
};
Range.prototype.toString = function(){
  return "(" + this.form + " ..." + this.to + ")";
};
//===============================================================
//9.3 Classes in JAVA style
// Обьект-конструктор:
//Определяет имя класса, свойства добавляемые в этот обьект играют роль полей класса и методов класса
//Обьект прототип:
//Свойства наследуемые функцией играют роль методов екземпляра класса
// Обьект екземпляра:
//свойства определяемые в екземпляре не являются общими.. Свойства екземпляра которые не являются общими
// играют роль полей екземпляра класса
//-------------------------------------------------------
// Простая функция для определения простых классов
function defineClass(constructor, // Функция определяющая свойства екземпляра
  methods, // методы екземпляров копируются в прототип
  statics) // свойства класса копируются в конструктор
{
  if(methods) extand(constructor.prototype, methods);
  if(statics) extand(constructor, statics);
  return constructor;
}
// Простейший вариант нашего класса Range
var SimpleRange = 
defineClass(function(f, t){ this.f = f; this.t = t; }
{
  includes: function(x) { return this.f <= x && x <= this.t;}
  toString: function() { return this.f + "..." + this.t;}
}
{upto: function(t){ return new SimpleRange(0, t);
}});
//============================================================
//9.6 Приемы ООП в JavaScript



</script>


</body>
</html>

